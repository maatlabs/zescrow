/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getOwnershipDecoder,
  getOwnershipEncoder,
  type Ownership,
  type OwnershipArgs,
} from '../types';

export const VERIFIER_ROUTER_DISCRIMINATOR = new Uint8Array([
  188, 46, 30, 54, 25, 63, 197, 26,
]);

export function getVerifierRouterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VERIFIER_ROUTER_DISCRIMINATOR
  );
}

export type VerifierRouter = {
  discriminator: ReadonlyUint8Array;
  ownership: Ownership;
  verifierCount: number;
};

export type VerifierRouterArgs = {
  ownership: OwnershipArgs;
  verifierCount: number;
};

export function getVerifierRouterEncoder(): Encoder<VerifierRouterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['ownership', getOwnershipEncoder()],
      ['verifierCount', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VERIFIER_ROUTER_DISCRIMINATOR })
  );
}

export function getVerifierRouterDecoder(): Decoder<VerifierRouter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['ownership', getOwnershipDecoder()],
    ['verifierCount', getU32Decoder()],
  ]);
}

export function getVerifierRouterCodec(): Codec<
  VerifierRouterArgs,
  VerifierRouter
> {
  return combineCodec(getVerifierRouterEncoder(), getVerifierRouterDecoder());
}

export function decodeVerifierRouter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VerifierRouter, TAddress>;
export function decodeVerifierRouter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VerifierRouter, TAddress>;
export function decodeVerifierRouter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VerifierRouter, TAddress> | MaybeAccount<VerifierRouter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVerifierRouterDecoder()
  );
}

export async function fetchVerifierRouter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VerifierRouter, TAddress>> {
  const maybeAccount = await fetchMaybeVerifierRouter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVerifierRouter<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VerifierRouter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVerifierRouter(maybeAccount);
}

export async function fetchAllVerifierRouter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VerifierRouter>[]> {
  const maybeAccounts = await fetchAllMaybeVerifierRouter(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVerifierRouter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VerifierRouter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVerifierRouter(maybeAccount)
  );
}
