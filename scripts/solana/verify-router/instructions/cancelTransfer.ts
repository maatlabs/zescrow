/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { VERIFIER_ROUTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CANCEL_TRANSFER_DISCRIMINATOR = new Uint8Array([
  50, 32, 70, 130, 142, 41, 111, 175,
]);

export function getCancelTransferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_TRANSFER_DISCRIMINATOR
  );
}

export type CancelTransferInstruction<
  TProgram extends string = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
  TAccountState extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountState extends string
        ? WritableAccount<TAccountState>
        : TAccountState,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type CancelTransferInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CancelTransferInstructionDataArgs = {};

export function getCancelTransferInstructionDataEncoder(): Encoder<CancelTransferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CANCEL_TRANSFER_DISCRIMINATOR })
  );
}

export function getCancelTransferInstructionDataDecoder(): Decoder<CancelTransferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCancelTransferInstructionDataCodec(): Codec<
  CancelTransferInstructionDataArgs,
  CancelTransferInstructionData
> {
  return combineCodec(
    getCancelTransferInstructionDataEncoder(),
    getCancelTransferInstructionDataDecoder()
  );
}

export type CancelTransferInput<
  TAccountState extends string = string,
  TAccountAuthority extends string = string,
> = {
  state: Address<TAccountState>;
  authority: TransactionSigner<TAccountAuthority>;
};

export function getCancelTransferInstruction<
  TAccountState extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
>(
  input: CancelTransferInput<TAccountState, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): CancelTransferInstruction<
  TProgramAddress,
  TAccountState,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? VERIFIER_ROUTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    state: { value: input.state ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.state),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getCancelTransferInstructionDataEncoder().encode({}),
  } as CancelTransferInstruction<
    TProgramAddress,
    TAccountState,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedCancelTransferInstruction<
  TProgram extends string = typeof VERIFIER_ROUTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    state: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: CancelTransferInstructionData;
};

export function parseCancelTransferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelTransferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      state: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getCancelTransferInstructionDataDecoder().decode(instruction.data),
  };
}
