/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

/**
 * Groth16 proof elements on BN254 curve
 * - pi_a must be a point in G1
 * - pi_b must be a point in G2
 * - pi_c must be a point in G1
 * Note: pi_a must be negated before calling verify
 */

export type Proof = {
  piA: ReadonlyUint8Array;
  piB: ReadonlyUint8Array;
  piC: ReadonlyUint8Array;
};

export type ProofArgs = Proof;

export function getProofEncoder(): Encoder<ProofArgs> {
  return getStructEncoder([
    ['piA', fixEncoderSize(getBytesEncoder(), 64)],
    ['piB', fixEncoderSize(getBytesEncoder(), 128)],
    ['piC', fixEncoderSize(getBytesEncoder(), 64)],
  ]);
}

export function getProofDecoder(): Decoder<Proof> {
  return getStructDecoder([
    ['piA', fixDecoderSize(getBytesDecoder(), 64)],
    ['piB', fixDecoderSize(getBytesDecoder(), 128)],
    ['piC', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getProofCodec(): Codec<ProofArgs, Proof> {
  return combineCodec(getProofEncoder(), getProofDecoder());
}
