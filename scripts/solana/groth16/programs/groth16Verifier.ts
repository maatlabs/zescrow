/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedVerifyInstruction } from '../instructions';

export const GROTH16_VERIFIER_PROGRAM_ADDRESS =
  'CA4wbHHhe4bxakLB4t21uQKWSjpGYciNKJjJS26XRnmi' as Address<'CA4wbHHhe4bxakLB4t21uQKWSjpGYciNKJjJS26XRnmi'>;

export enum Groth16VerifierInstruction {
  Verify,
}

export function identifyGroth16VerifierInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): Groth16VerifierInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 161, 141, 48, 120, 198, 88, 150])
      ),
      0
    )
  ) {
    return Groth16VerifierInstruction.Verify;
  }
  throw new Error(
    'The provided instruction could not be identified as a groth16Verifier instruction.'
  );
}

export type ParsedGroth16VerifierInstruction<
  TProgram extends string = 'CA4wbHHhe4bxakLB4t21uQKWSjpGYciNKJjJS26XRnmi',
> = {
  instructionType: Groth16VerifierInstruction.Verify;
} & ParsedVerifyInstruction<TProgram>;
