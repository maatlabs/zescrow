/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { TEST_BAD_VERIFIER_PROGRAM_ADDRESS } from '../programs';

/** VerificationError: Verification Error */
export const TEST_BAD_VERIFIER_ERROR__VERIFICATION_ERROR = 0x1770; // 6000

export type TestBadVerifierError =
  typeof TEST_BAD_VERIFIER_ERROR__VERIFICATION_ERROR;

let testBadVerifierErrorMessages:
  | Record<TestBadVerifierError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  testBadVerifierErrorMessages = {
    [TEST_BAD_VERIFIER_ERROR__VERIFICATION_ERROR]: `Verification Error`,
  };
}

export function getTestBadVerifierErrorMessage(
  code: TestBadVerifierError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      testBadVerifierErrorMessages as Record<TestBadVerifierError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTestBadVerifierError<
  TProgramErrorCode extends TestBadVerifierError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TEST_BAD_VERIFIER_PROGRAM_ADDRESS,
    code
  );
}
