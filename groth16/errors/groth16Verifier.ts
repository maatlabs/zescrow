/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { GROTH16_VERIFIER_PROGRAM_ADDRESS } from '../programs';

/** G1CompressionError: G1 compression error */
export const GROTH16_VERIFIER_ERROR__G1_COMPRESSION_ERROR = 0x1770; // 6000
/** G2CompressionError: G2 compression error */
export const GROTH16_VERIFIER_ERROR__G2_COMPRESSION_ERROR = 0x1771; // 6001
/** VerificationError: Verification error */
export const GROTH16_VERIFIER_ERROR__VERIFICATION_ERROR = 0x1772; // 6002
/** InvalidPublicInput: Invalid public input */
export const GROTH16_VERIFIER_ERROR__INVALID_PUBLIC_INPUT = 0x1773; // 6003
/** ArithmeticError: Arithmetic error */
export const GROTH16_VERIFIER_ERROR__ARITHMETIC_ERROR = 0x1774; // 6004
/** PairingError: Pairing error */
export const GROTH16_VERIFIER_ERROR__PAIRING_ERROR = 0x1775; // 6005

export type Groth16VerifierError =
  | typeof GROTH16_VERIFIER_ERROR__ARITHMETIC_ERROR
  | typeof GROTH16_VERIFIER_ERROR__G1_COMPRESSION_ERROR
  | typeof GROTH16_VERIFIER_ERROR__G2_COMPRESSION_ERROR
  | typeof GROTH16_VERIFIER_ERROR__INVALID_PUBLIC_INPUT
  | typeof GROTH16_VERIFIER_ERROR__PAIRING_ERROR
  | typeof GROTH16_VERIFIER_ERROR__VERIFICATION_ERROR;

let groth16VerifierErrorMessages:
  | Record<Groth16VerifierError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  groth16VerifierErrorMessages = {
    [GROTH16_VERIFIER_ERROR__ARITHMETIC_ERROR]: `Arithmetic error`,
    [GROTH16_VERIFIER_ERROR__G1_COMPRESSION_ERROR]: `G1 compression error`,
    [GROTH16_VERIFIER_ERROR__G2_COMPRESSION_ERROR]: `G2 compression error`,
    [GROTH16_VERIFIER_ERROR__INVALID_PUBLIC_INPUT]: `Invalid public input`,
    [GROTH16_VERIFIER_ERROR__PAIRING_ERROR]: `Pairing error`,
    [GROTH16_VERIFIER_ERROR__VERIFICATION_ERROR]: `Verification error`,
  };
}

export function getGroth16VerifierErrorMessage(
  code: Groth16VerifierError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      groth16VerifierErrorMessages as Record<Groth16VerifierError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isGroth16VerifierError<
  TProgramErrorCode extends Groth16VerifierError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    GROTH16_VERIFIER_PROGRAM_ADDRESS,
    code
  );
}
